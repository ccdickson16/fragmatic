num<-0;
splines<-list();
preds<-list();
titles<-list();
ylen<-length(table$Fragment_length);
for(i in names(table)){
if (i != "Fragment_length"){
if (i != "Sum"){
impulsePlot(i);
}
if (length(unique(table[[i]])) > 4){
if (i == "Sum"){
sumSpline<- smooth.spline(table[[i]], table$Fragment_length, spar=.05, tol=0.1)
sumPred <- predict(sumSpline,0:ylen)
}else{
num<-num+1;
titles[[num]]<-i;
splines[[num]] <- smooth.spline(table[[i]], table$Fragment_length, spar=.05, tol=0.1)
preds[[num]] <- predict(splines[[num]],0:ylen)
}
}else{
print(paste("too few values for", i, ", leaving out of final plot"));
}
}
}
table$Fragment_length
table
ls
read.table(file="sim.tsv",header=T)
table<-read.table(file="sim.tsv",header=T)
table$Fragment_length
length(table$Fragment_length)
num<-0;
splines<-list();
preds<-list();
titles<-list();
ylen<-length(table$Fragment_length);
for(i in names(table)){
if (i != "Fragment_length"){
if (i != "Sum"){
impulsePlot(i);
}
if (length(unique(table[[i]])) > 4){
if (i == "Sum"){
sumSpline<- smooth.spline(table[[i]], table$Fragment_length, spar=.05, tol=0.1)
sumPred <- predict(sumSpline,0:ylen)
}else{
num<-num+1;
titles[[num]]<-i;
splines[[num]] <- smooth.spline(table[[i]], table$Fragment_length, spar=.05, tol=0.1)
preds[[num]] <- predict(splines[[num]],0:ylen)
}
}else{
print(paste("too few values for", i, ", leaving out of final plot"));
}
}
}
impulsePlot <- function(x) {
#Impulse plot with automatic axes
plot(table[[x]],table$Fragment_length,type="h", main=x,
xlab="Fragment length",ylab="Frequency")
#Impulse plot xlim=100:5000
plot(table[[x]],table$Fragment_length,type="h", main=x,
xlab="Fragment length",ylab="Frequency",xlim=range(0:5000))
#Impulse plot xlim=100:5000
plot(table[[x]],table$Fragment_length,type="h", main=x,
xlab="Fragment length",ylab="Frequency",xlim=range(0:1000))
#Impulse plot xlim=100:5000
plot(table[[x]],table$Fragment_length,type="h", main=x,
xlab="Fragment length",ylab="Frequency",xlim=range(0:500))
}
num<-0;
splines<-list();
preds<-list();
titles<-list();
ylen<-length(table$Fragment_length);
for(i in names(table)){
if (i != "Fragment_length"){
if (i != "Sum"){
impulsePlot(i);
}
if (length(unique(table[[i]])) > 4){
if (i == "Sum"){
sumSpline<- smooth.spline(table[[i]], table$Fragment_length, spar=.05, tol=0.1)
sumPred <- predict(sumSpline,0:ylen)
}else{
num<-num+1;
titles[[num]]<-i;
splines[[num]] <- smooth.spline(table[[i]], table$Fragment_length, spar=.05, tol=0.1)
preds[[num]] <- predict(splines[[num]],0:ylen)
}
}else{
print(paste("too few values for", i, ", leaving out of final plot"));
}
}
}
colors<-rainbow(num);
x<-0:ylen;
t<-unlist(titles);
plot(x, sumPred$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",lwd=1.5)
for (i in 1:num){
lines(preds[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
#Total fragment figures (x axis 0:5000) 
plot(x, sumPred$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",xlim=range(0:5000),lwd=1.5)
for (i in 1:num){
lines(preds[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
#Total fragment figures (x axis 0:1000) 
plot(x, sumPred$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",xlim=range(0:1000),lwd=1.5)
for (i in 1:num){
lines(preds[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
preds[[i]]
sumSpline
num<-0;
splines<-list();
preds<-list();
titles<-list();
ylen<-length(table$Fragment_length);
for(i in names(table)){
if (i != "Fragment_length"){
if (i != "Sum"){
impulsePlot(i);
}
if (length(unique(table[[i]])) > 4){
if (i == "Sum"){
sumSpline<- smooth.spline(table[[i]], table$Fragment_length, spar=.05, tol=1)
sumPred <- predict(sumSpline,0:ylen)
}else{
num<-num+1;
titles[[num]]<-i;
splines[[num]] <- smooth.spline(table[[i]], table$Fragment_length, spar=.05, tol=1)
preds[[num]] <- predict(splines[[num]],0:ylen)
}
}else{
print(paste("too few values for", i, ", leaving out of final plot"));
}
}
}
colors<-rainbow(num);
x<-0:ylen;
t<-unlist(titles);
plot(x, sumPred$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",lwd=1.5)
for (i in 1:num){
lines(preds[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
#Total fragment figures (x axis 0:5000) 
plot(x, sumPred$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",xlim=range(0:5000),lwd=1.5)
for (i in 1:num){
lines(preds[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
#Total fragment figures (x axis 0:1000) 
plot(x, sumPred$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",xlim=range(0:1000),lwd=1.5)
for (i in 1:num){
lines(preds[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
plot(sumSpline)
plot(table$Sum, table$Fragment_length)
num<-0;
splines<-list();
preds<-list();
titles<-list();
ylen<-length(table$Sum);
for(i in names(table)){
if (i != "Fragment_length"){
if (i != "Sum"){
impulsePlot(i);
}
if (length(unique(table[[i]])) > 4){
if (i == "Sum"){
sumSpline<- smooth.spline(table[[i]], table$Fragment_length, spar=.05, tol=1)
sumPred <- predict(sumSpline,0:ylen)
}else{
num<-num+1;
titles[[num]]<-i;
splines[[num]] <- smooth.spline(table[[i]], table$Fragment_length, spar=.05, tol=1)
preds[[num]] <- predict(splines[[num]],0:ylen)
}
}else{
print(paste("too few values for", i, ", leaving out of final plot"));
}
}
}
colors<-rainbow(num);
x<-0:ylen;
t<-unlist(titles);
plot(x, sumPred$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",lwd=1.5)
for (i in 1:num){
lines(preds[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
#Total fragment figures (x axis 0:5000) 
plot(x, sumPred$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",xlim=range(0:5000),lwd=1.5)
for (i in 1:num){
lines(preds[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
#Total fragment figures (x axis 0:1000) 
plot(x, sumPred$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",xlim=range(0:1000),lwd=1.5)
for (i in 1:num){
lines(preds[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
num<-0;
splines<-list();
preds<-list();
titles<-list();
ylen<-length(table$Sum);
for(i in names(table)){
if (i != "Fragment_length"){
if (i != "Sum"){
impulsePlot(i);
}
if (length(unique(table[[i]])) > 4){
if (i == "Sum"){
sumSpline<- loess(table$Fragment_length~table[[i]])
sumPred <- predict(sumSpline,0:ylen)
}else{
num<-num+1;
titles[[num]]<-i;
splines[[num]] <- loess(table$Fragment_length~table[[i]])
preds[[num]] <- predict(splines[[num]],0:ylen)
}
}else{
print(paste("too few values for", i, ", leaving out of final plot"));
}
}
}
colors<-rainbow(num);
x<-0:ylen;
t<-unlist(titles);
plot(sumSpline$x, sumSpline$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",lwd=1.5)
for (i in 1:num){
lines(splines[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
#Total fragment figures (x axis 0:5000) 
plot(sumSpline$x, sumSpline$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",xlim=range(0:5000),lwd=1.5)
for (i in 1:num){
lines(splines[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
#Total fragment figures (x axis 0:1000) 
plot(sumSpline$x, sumSpline$y,type="l",main="Total recovered fragments",
xlab="Fragment size", ylab="Frequency",xlim=range(0:1000),lwd=1.5)
for (i in 1:num){
lines(splines[[i]],col=colors[[i]],lwd=1.5)
}
legend("topright", c("Total fragments", t), col=c("black",colors),lwd=1.5)
q()
loess(table$Fragment_length~table$Sum)
lo<- loess(table$Fragment_length~table$Sum)
plot(predict(lo))
lo<- loess(table$Sum~table$Fragment_length)
plot(predict(lo))
plot(predict(lo))
q()
